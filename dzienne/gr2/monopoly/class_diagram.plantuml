@startuml
Game "dices" *-- Dice
Game -- Board
Board *-- Place
PlaceWithCard -- Card
Player *-- Card
Bank *-- Card
Hotel --|> House
PlaceWithCardAndHouses *-- House
Game -- Bank
Game *-- Player
SpecialPlace --|> Place
PlaceWithCard --|> Place
PlaceWithCardAndHouses --|> PlaceWithCard
Game *-- LoteryCoupon

class Dice{
    +roll()
    +showValue():int
}
'Controller of the game process'
class Game{
    -activePlayer: Player
    +nextPlayer()
    'implements move activity diagram'
    +moveProcess()
}
class Board{
    +getPlaceOnPosition(p:int):Place
}
class Bank{
    -cashAmmount:int
    +isPlaceOwned(place:Place):boolean
    /' 
        sell - operations:
        increase ammount, 
        remove card from bank,
        invoke buy on player
    '/
    +sell(card:Card, player:Player)
}
note top
    add information about houses to buy
endnote 
class Place {
    +id : int
    +name: String 
    +icon : Image
}


class SpecialPlace {
    +acion():void
}
class PlaceWithCard {}
class PlaceWithCardAndHouses {}



class Player{
    -cashAmmount:int
    +position:int 
    +move()
    +doYouBuy(place:Place): boolean
    /' 
        buy - operations:
        decrease ammount, 
        add card
    '/
    +buy(card:Card)
}
note top
    we can use Visitor pattern
    for count the wealth of player
    ---
    what to do with
    lotery coupon :"you can leave jail earlier"
endnote

class Card{
    id:int
    price:int
    rent:int
    country:String
    countrySize:int
}
note left
    id on Card is the same
    as id on connected Place
    ---
    we can create composite pattern
    for Country if Player has all Cards
    from one country.
    ---
    how we add Houses and "countries" 
    without houses (via inheritance or fields)
    --- 
    add information about house price, 
    rent depends on houses,
    how many houses are placed
end note
class House
class Hotel

class LoteryCoupon{
    +text: String
    +action():void
}

@enduml